// Code generated by go-bindata.
// sources:
// assets/templates/image.html
// assets/templates/index.html
// assets/templates/layout.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTemplatesImageHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x91\x4d\x4e\xc3\x30\x10\x85\xd7\xe9\x29\x2c\x2f\xd8\xb5\x16\x74\x07\x49\x24\x10\x1b\x24\x54\x10\x12\x07\x70\x1c\x37\x31\x8a\x7f\x64\x4f\x0a\x95\x95\xbb\xe3\x38\x69\xeb\x54\xec\x58\x24\x19\xf9\x3d\x7f\xf3\x66\xe2\x7d\xcd\xf7\x42\x71\x84\x99\x56\xc0\x15\xe0\x61\x58\x65\x79\x2d\x0e\x88\x75\xd4\xb9\x02\x5b\xfd\x8d\xcb\x55\xb6\x38\x63\xba\x5b\x3b\xb9\xbe\xbd\x43\x63\x25\xeb\x50\x45\xcf\xc2\x04\x6d\x2f\x2b\x45\x45\x87\x91\x00\x2e\x1d\xd3\x86\xc7\x0a\x8e\x86\x17\xb8\x05\x30\xf7\x84\x38\xd6\x72\x49\x37\xda\x36\xe4\x45\xd2\x86\xbf\x55\x5f\x9c\xc1\x44\xcb\x72\x21\x1b\xe4\x2c\x2b\xb0\xf7\x9b\x28\x4f\xef\xcf\x8f\xd7\x61\xc0\x88\x76\x90\x28\x3b\x2a\x79\x38\x9d\x6f\xa6\x69\xa9\x01\xa1\xd5\xac\x64\x79\xbb\x8d\x31\x8c\xd5\xa6\xc0\x2a\xdc\xc2\xe5\x15\x24\x27\xed\x76\x76\x7b\x8f\xc4\x1e\xcd\xea\x33\x77\xcc\x8a\x48\x0b\x26\x93\x60\xea\x8b\x92\xd0\x96\x7e\x62\x82\xc2\x55\x3d\x6e\x38\x41\x3f\xf6\xd0\x6a\x3b\xf2\xca\xa7\x23\xca\x9d\xa1\x2a\x01\xd3\xa8\x46\xe6\xd9\x48\x46\x4f\x79\xcd\xcb\x49\x98\x79\x4a\xed\xfd\x25\xf3\xbb\xe5\x07\xa1\x7b\x17\xee\xd1\xd3\x46\x2a\x50\x28\x3c\x6b\x63\x85\xa4\xf6\x18\xeb\xae\xc1\xc8\xea\x2e\xfc\x99\xaa\x07\x08\x63\xa0\xd6\xf2\x7d\xb2\xdf\x0b\x08\x97\x37\x1d\xb5\xf6\x21\x27\x74\x91\x20\x6d\xbb\xe3\x3f\xf0\xef\x96\x13\x24\xb4\xb3\x7f\xb4\x3b\xcf\x7b\x2a\xe6\xef\xc9\xf2\x1b\x00\x00\xff\xff\x7c\x2b\x18\x78\xdb\x02\x00\x00")

func assetsTemplatesImageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesImageHtml,
		"assets/templates/image.html",
	)
}

func assetsTemplatesImageHtml() (*asset, error) {
	bytes, err := assetsTemplatesImageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/image.html", size: 731, mode: os.FileMode(436), modTime: time.Unix(1453637396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6a\xc4\x20\x10\x86\xcf\xe6\x29\x44\x7a\x2c\xf1\x5e\x26\x39\xb7\x50\x7a\x28\xed\x03\xcc\x26\x93\x44\x50\xb3\x18\x73\x1a\x7c\xf7\xd5\x24\x2c\xb2\x07\x99\x19\xe6\xfb\xff\xdf\x61\x1e\x69\x32\x9e\xa4\x1a\x56\x1f\xc9\x47\x95\x52\x23\x60\xb7\x3d\x73\x40\x3f\x93\x7c\x33\xef\xf9\x39\xcc\xed\x47\x27\xdb\xaf\xd2\x6d\x05\x12\x60\x4d\x9f\x8b\x00\x94\x4b\xa0\xa9\x53\xcc\x27\xd8\x7e\x46\x67\xff\x7f\xbf\x53\x52\x07\x20\x60\x32\xf3\x1e\xe8\x1c\x04\x18\x37\xcb\x2d\x0c\x95\xe0\x6f\xd9\xdd\xcd\xa3\xb9\x54\x12\x6d\xac\xb6\x3f\xe8\xe8\xe9\x75\x98\x0d\x78\x8f\x66\xf5\xfd\x0b\x02\xba\xda\x9d\xc9\xba\x8a\x06\x8d\xa5\x82\x3e\x3e\xce\x4c\x7e\x2c\x9a\x7c\x6c\x73\x0d\xcd\x23\x00\x00\xff\xff\x8f\x3b\x03\x1c\x10\x01\x00\x00")

func assetsTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesIndexHtml,
		"assets/templates/index.html",
	)
}

func assetsTemplatesIndexHtml() (*asset, error) {
	bytes, err := assetsTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/index.html", size: 272, mode: os.FileMode(436), modTime: time.Unix(1453637234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\xdf\x6f\xdb\x36\x10\x7e\x4e\xff\x0a\x4e\x2f\xb2\x37\x99\xaa\x97\xfd\x30\x66\x29\x40\x0a\x67\x05\x86\xad\x0d\xb0\xa0\x01\x16\xe4\xe1\x4c\x9d\x25\x3a\x14\xa9\x92\x74\x14\x4d\xd1\xff\xbe\xa3\x94\xd8\xed\x80\xbe\x88\xe4\xfd\xf8\xc8\xef\xee\x3b\x65\xdf\x15\x46\xf8\xae\x41\x56\xf9\x5a\x5d\xbc\xc9\x5e\x17\x84\xe2\xe2\xcd\x59\x56\xa3\x07\x26\x2a\xb0\x0e\x7d\x1e\x1d\xfc\x6e\xb1\x8a\x8e\x76\x0d\x35\xe6\xd1\xa3\xc4\xb6\x31\xd6\x47\x4c\x18\xed\x51\x53\x5c\x2b\x0b\x5f\xe5\x05\x3e\x4a\x81\x8b\xf1\x90\x30\xa9\xa5\x97\xa0\x16\x4e\x80\xc2\x7c\xc9\xdf\x8e\x38\x5e\x7a\x85\x17\x7d\xcf\x6f\xc2\x66\x18\xb2\x74\xb2\x7c\x7d\x45\x81\x4e\x58\xd9\x78\x69\xf4\x17\xb7\x50\xd6\xe6\xe4\x18\x86\x11\x50\x49\xfd\xc0\x2c\xaa\x3c\x72\xbe\x53\xe8\x2a\x44\x7a\x59\x65\x71\x97\x47\x95\xf7\x8d\xfb\x2d\x4d\x6b\x78\x12\x85\xe6\x5b\x63\xbc\xf3\x16\x9a\x70\x10\xa6\x4e\x8f\x86\xf4\x9c\x9f\xf3\x5f\x52\xe1\xdc\xc9\xc6\x6b\x49\x51\xce\x45\xc4\xc4\x63\x69\xa5\xef\xe8\x8e\x0a\xce\x57\x3f\x2d\x96\x9f\x57\xf5\xcd\x1f\x1f\x2f\xff\x7e\x5a\xed\x97\x97\x87\x1f\xe0\xe7\xdb\xcd\x27\x7d\x2d\x7f\x54\x0f\xbf\xef\xda\xf6\xea\x12\x56\xd5\x66\x53\xec\xff\x51\xcd\x9f\x58\x3e\x55\xfb\x4f\x7f\x5d\x2d\x77\xe5\xfe\xf6\xfa\x7d\xfd\xf0\xaf\xfb\x95\x48\x59\xe3\x9c\xb1\xb2\x94\x3a\x8f\x40\x1b\xdd\xd5\xe6\xe0\x88\x51\x96\x4e\xad\xc8\xb6\xa6\xe8\x98\xf4\x58\x3b\x61\x1a\xaa\x49\x34\x1e\x42\xeb\x26\x62\xc4\xcb\x89\x0a\x6b\xe0\xc6\x96\xe9\x2d\x6e\xaf\xa1\xc4\x50\x92\xbe\x67\x72\xc7\xf8\xa5\x06\xd5\x79\x29\xdc\x30\x50\x99\xa6\xb2\x91\xf7\x6c\xb6\x3b\x68\x11\x0a\x38\x93\x89\x4b\x4c\x52\x26\x36\x81\xa4\x9e\xf7\xf2\x2e\x7e\x6f\x4c\xa9\xf0\x98\xf9\x71\xbb\x47\xe1\xe3\xfb\xdc\xae\xe5\x9d\xbd\xcf\xc3\xe7\xf9\xf9\x98\x3f\xef\x03\x5c\x30\xf2\xcf\xf9\xb4\x3c\x3f\xdf\xdd\xcf\x79\x73\x70\xd5\x0c\x6c\x79\xa8\xa9\x6f\x6e\x3e\x24\xa3\x53\xe5\xcb\xef\x35\xb6\x6c\x03\x1e\x67\xf3\x35\xe4\x8e\x0b\x8b\x74\xb8\x52\x18\x02\x67\x66\x9e\x10\x60\x4d\xf6\x12\xfd\x8b\xd1\xbd\xeb\x6e\xa0\xfc\x40\xaa\x20\xf7\xdd\xdb\xfb\x35\x70\x70\x9d\x16\xf9\x92\x76\xce\x8a\xbc\x5c\xd7\xbc\x01\x4b\xa1\x1f\x4c\x81\x5c\x6a\x87\xd6\xbf\xc3\x9d\xb1\x38\x0b\xb4\x08\x71\x98\xcf\x5a\xa9\x0b\xd3\x26\xa4\xfd\xf1\x4d\x49\x3c\xd5\x23\x4e\xe2\x34\x6d\xdb\x96\x97\x23\xf1\x05\xbc\x32\x1f\xe5\x71\x3a\xed\x1d\x45\x96\x10\xcf\xd7\x04\x57\xc2\x2c\x9e\x1e\x1e\x27\x2c\x26\x51\x7e\x51\xe9\x60\x81\x83\x37\xa7\x48\x87\xba\x08\xd6\x86\xba\x13\x26\x67\xf4\x64\xe9\xb1\x1f\xd4\x2d\x8a\x60\x63\x93\x34\x3c\x32\xa1\xc0\xb9\x3c\xa2\xed\x16\x2c\x9b\x96\x45\x81\x3b\x38\x28\x1f\xba\x7b\x96\x15\xf2\x18\x15\x46\x03\xa4\x46\x3b\x7a\xbe\x72\xbd\x64\x06\x31\xbd\xba\xcf\x32\xf8\x9f\x77\x6b\x41\x17\xaf\xd3\x12\xd1\x58\xb2\x69\x2e\x59\x18\x4c\x98\x30\x53\x02\x1d\xef\x7d\xd9\x64\x29\x25\x87\xf5\x1b\xef\xe8\x7b\x92\x69\xa3\xa8\x3c\x2c\x7a\x19\xdd\x88\xf1\x91\xdf\x84\x40\x12\x0f\xda\x1e\xa5\x3e\xfe\x7c\xfe\x0b\x00\x00\xff\xff\x16\xd3\xec\x22\x94\x04\x00\x00")

func assetsTemplatesLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesLayoutHtml,
		"assets/templates/layout.html",
	)
}

func assetsTemplatesLayoutHtml() (*asset, error) {
	bytes, err := assetsTemplatesLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/layout.html", size: 1172, mode: os.FileMode(436), modTime: time.Unix(1453642096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/templates/image.html": assetsTemplatesImageHtml,
	"assets/templates/index.html": assetsTemplatesIndexHtml,
	"assets/templates/layout.html": assetsTemplatesLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"image.html": &bintree{assetsTemplatesImageHtml, map[string]*bintree{}},
			"index.html": &bintree{assetsTemplatesIndexHtml, map[string]*bintree{}},
			"layout.html": &bintree{assetsTemplatesLayoutHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


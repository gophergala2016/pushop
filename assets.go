// Code generated by go-bindata.
// sources:
// assets/templates/image.html
// assets/templates/index.html
// assets/templates/layout.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTemplatesImageHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\xaa\xad\xe5\xe2\xb4\xc9\xcc\x4d\x57\x28\x2e\x4a\xb6\x55\xaa\xae\xd6\xf3\xcc\x4d\x4c\x4f\x85\x90\xa1\x41\x3e\xb5\xb5\x4a\x0a\x89\x39\x25\x48\x32\x7e\x89\xb9\xa9\x20\x51\x7d\x3b\xae\xea\xea\xd4\xbc\x14\xa0\x01\x80\x00\x00\x00\xff\xff\x33\x6d\xab\x6e\x56\x00\x00\x00")

func assetsTemplatesImageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesImageHtml,
		"assets/templates/image.html",
	)
}

func assetsTemplatesImageHtml() (*asset, error) {
	bytes, err := assetsTemplatesImageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/image.html", size: 86, mode: os.FileMode(420), modTime: time.Unix(1453626103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6a\xc4\x20\x10\x86\xcf\xe6\x29\x44\x7a\x2c\xf1\x5e\x26\x39\xb7\x50\x7a\x28\xed\x03\xcc\x26\x93\x44\x50\xb3\x18\x73\x1a\x7c\xf7\xd5\x24\x2c\xb2\x07\x99\x19\xe6\xfb\xff\xdf\x61\x1e\x69\x32\x9e\xa4\x1a\x56\x1f\xc9\x47\x95\x52\x23\x60\xb7\x3d\x73\x40\x3f\x93\x7c\x33\xef\xf9\x39\xcc\xed\x47\x27\xdb\xaf\xd2\x6d\x05\x12\x60\x4d\x9f\x8b\x00\x94\x4b\xa0\xa9\x53\xcc\x27\xd8\x7e\x46\x67\xff\x7f\xbf\x53\x52\x07\x20\x60\x32\xf3\x1e\xe8\x1c\x04\x18\x37\xcb\x2d\x0c\x95\xe0\x6f\xd9\xdd\xcd\xa3\xb9\x54\x12\x6d\xac\xb6\x3f\xe8\xe8\xe9\x75\x98\x0d\x78\x8f\x66\xf5\xfd\x0b\x02\xba\xda\x9d\xc9\xba\x8a\x06\x8d\xa5\x82\x3e\x3e\xce\x4c\x7e\x2c\x9a\x7c\x6c\x73\x0d\xcd\x23\x00\x00\xff\xff\x8f\x3b\x03\x1c\x10\x01\x00\x00")

func assetsTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesIndexHtml,
		"assets/templates/index.html",
	)
}

func assetsTemplatesIndexHtml() (*asset, error) {
	bytes, err := assetsTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/index.html", size: 272, mode: os.FileMode(436), modTime: time.Unix(1453626312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x53\xcd\x6e\x9c\x3c\x14\x5d\x27\x4f\xe1\x8f\x0d\xf0\xc9\x63\x67\x76\x55\xc7\x1e\xa9\x51\xaa\xee\xd2\x2e\x22\x75\x31\x9a\x85\x63\xee\x80\x23\xb0\xa9\xed\x09\x1a\x31\xbc\x7b\xaf\x21\x21\xe9\x06\xfb\x9e\xfb\xef\x73\x10\xff\x55\x4e\xc7\x4b\x0f\xa4\x89\x5d\xbb\xbf\x15\xef\x07\xa8\x6a\x7f\x7b\x23\x3a\x88\x8a\xe8\x46\xf9\x00\x51\x66\xe7\x78\xda\x7c\xc9\x56\xdc\xaa\x0e\x64\xf6\x6a\x60\xe8\x9d\x8f\x19\xd1\xce\x46\xb0\x18\x37\x98\x2a\x36\xb2\x82\x57\xa3\x61\x33\x1b\x94\x18\x6b\xa2\x51\xed\x26\x68\xd5\x82\xdc\xb2\xbb\xb9\x4e\x34\xb1\x85\xfd\x38\xb2\xa7\x74\x99\x26\xc1\x17\xe4\xdf\x16\x15\x04\xed\x4d\x1f\x8d\xb3\x9f\xba\x60\xd6\xc3\x87\x63\x9a\xb0\xa0\xe0\xcb\xe0\xe2\xd9\x55\x17\x62\x22\x74\x41\xbb\x1e\x2b\x64\xb3\x91\x16\x95\x59\x13\x63\xff\x95\xf3\xa0\x1b\xe8\x14\x73\xbe\xe6\xbf\xe1\xf9\x97\xaa\x21\x4d\x34\x8e\xc4\x9c\x08\xfb\x66\x55\x7b\x89\x46\x87\x69\xc2\x51\x96\x26\xe8\xbd\x29\x4e\x67\xab\x53\xbb\xc2\xd0\x40\x1d\xad\xa9\xa7\x8a\x76\xe5\x68\x0e\xf9\x0f\xe7\xea\x16\xd6\xcc\x9f\xcf\x2f\xa0\x63\x7e\x94\x7e\x67\x0e\xfe\x28\xd3\xe7\x7a\x5d\xf3\xcb\x31\x95\x4b\x20\xfb\x23\x97\xe3\x7a\x3d\x1c\x4b\xd6\x9f\x43\x53\x28\x5f\x9f\x3b\xdc\x32\x94\x13\x9d\x9d\xad\xdc\xfe\x6f\x61\x20\x0f\x2a\x42\x51\xee\x94\x0c\x4c\x7b\x40\xe3\x7b\x0b\x29\xb0\x70\x25\xc5\x82\x1d\xe2\x35\xc4\x37\x30\xdc\x5f\x9e\x54\xfd\x88\x6f\x88\xee\xc3\xdd\x71\xa7\x98\x0a\x17\xab\xe5\x16\x6f\xc1\x6b\x59\xef\x3a\xd6\x2b\x8f\xa1\x8f\xae\x02\x66\x6c\x00\x1f\xef\xe1\xe4\x3c\x14\x69\x2d\xac\x38\x95\xc5\x60\x6c\xe5\x06\x8a\x4a\x99\x67\xa2\xf9\xf2\x1e\x39\xcd\x39\x1f\x86\x81\xd5\xf3\xe2\x1b\xf5\xbe\x39\xd3\xae\xe3\x1f\xd6\x4b\xc0\xc8\x5a\xe5\xe5\x0e\xcb\xd5\xaa\xc8\x97\xc1\x73\x4a\x72\xa4\xf0\xd3\x4b\x27\x44\x9d\xa3\xfb\x88\x0c\x60\xab\x84\xf6\xc8\x4e\xd2\xd9\xec\x11\x7c\xe5\x03\xd9\xc2\x08\x32\x93\x94\x98\x07\x9f\x48\x12\xcd\x76\x2f\x14\x69\x3c\x9c\x64\xc6\x33\x94\x17\x59\xf4\x45\x92\xc0\xd4\x1e\x55\xb2\x4d\x0a\xe3\x6b\x8a\x78\x13\xd5\xfe\x76\x1c\x51\x27\x7d\x8b\xf3\x91\xec\x0d\xcc\x08\x9b\x1b\xf0\x35\xe8\x46\x9c\x9c\x8b\x4b\x26\x7f\xbf\x0a\x9e\x44\x37\x6b\x70\xfe\x87\xfe\x06\x00\x00\xff\xff\xeb\x14\x59\x41\x5b\x03\x00\x00")

func assetsTemplatesLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesLayoutHtml,
		"assets/templates/layout.html",
	)
}

func assetsTemplatesLayoutHtml() (*asset, error) {
	bytes, err := assetsTemplatesLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/layout.html", size: 859, mode: os.FileMode(436), modTime: time.Unix(1453623249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/templates/image.html": assetsTemplatesImageHtml,
	"assets/templates/index.html": assetsTemplatesIndexHtml,
	"assets/templates/layout.html": assetsTemplatesLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"image.html": &bintree{assetsTemplatesImageHtml, map[string]*bintree{}},
			"index.html": &bintree{assetsTemplatesIndexHtml, map[string]*bintree{}},
			"layout.html": &bintree{assetsTemplatesLayoutHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

